runtime macros/matchit.vim

set nocompatible
if has("autocmd")
  filetype indent plugin on
endif

" use an old regex engine that's faster?
set re=1

" copy to clipboard?
set clipboard=unnamed " use OS clipboard

" remove the mode section because it's displayed by the statusbar plugin
set noshowmode

" show relative line numbers except for the current line
set number relativenumber

" turn off spellcheck because it's obnoxious
" set nospell

" configure airline
let g:airline_powerline_fonts = 1
let g:airline_theme='gruvbox'

" gruvbox theme
colorscheme gruvbox
set background=dark
" colorscheme base16-eighties

" autoindent with two spaces, always expand tabs
autocmd FileType ruby,eruby,yaml setlocal ai sw=2 sts=2 et
autocmd FileType ruby,eruby,yaml setlocal path+=lib
autocmd FileType ruby,eruby,yaml setlocal colorcolumn=80
" Make ?s part of words
autocmd FileType ruby,eruby,yaml setlocal iskeyword+=?

" fix my typos
command! Q q " Bind :Q to :q
command! Qall qall
command! QA qall
command! E e
command! W w
command! Wq wq

" Let's be reasonable, shall we?
nmap k gk
nmap j gj

" change rspec to script/test
" todo: make these open up the spec file if you're not in one
map <Leader>t :call RunCurrentSpecFile()<CR>
map <Leader>s :call RunNearestSpec()<CR>
map <Leader>l :call RunLastSpec()<CR>
map <Leader>a :call RunAllSpecs()<CR>
" todo make this run in a separate pane and then close out
let g:rspec_command = "!script/test -q {spec}"

" use silver searcher for greplace
set grepprg=ag

" search for ctags files all the way up to root
set tags^=./.git/tags;

" open test files with t
nmap t :AV<CR>

" open file in github
nmap <Leader>g :Gbrowse<CR>

" auto save when going from insert to normal mode
inoremap <Esc> <Esc>:w<CR>

" run Ag from project root
let g:ag_working_path_mode="r"

" run ctrl-p from project root
let g:ctrlp_working_path_mode = 'ra'
" Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
" ag is fast enough that CtrlP doesn't need to cache
" let g:ctrlp_use_caching = 0

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

let g:ctrlp_cache_dir = $HOME . '/.cache/ctrlp'

" config for fzf
map <Leader><tab> :Files<CR>

" only lint on save
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_enter = 0
let g:ale_lint_on_save = 1

" trim whitespace on save
autocmd BufWritePre * :%s/\s\+$//e

" don't fold
set nofoldenable

